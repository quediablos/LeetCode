package org.leetcode.create_maximum_number_321;

import java.util.LinkedList;
import java.util.Objects;
import java.util.Queue;

public class Solution
{
    public class Value
    {
        public int number;
        public int array;
        public int index;
        public int indexOther;
        public int remainingNumbers;
        public Value from;
        public int degree;

        public Value(int number, int array, int index, int indexOther, int remainingNumbers, Value from, int degree) {
            this.number = number;
            this.array = array;
            this.index = index;
            this.indexOther = indexOther;
            this.remainingNumbers = remainingNumbers;
            this.from = from;
            this.degree = degree;
        }

        @Override
        public String toString() {
            return "Value{" +
                    "number=" + number +
                    ", array=" + array +
                    ", index=" + index +
                    ", indexOther=" + indexOther +
                    ", remainingNumbers=" + remainingNumbers +
                    ", from=" + from +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Value value = (Value) o;
            return array == value.array &&
                    index == value.index;
        }

        @Override
        public int hashCode() {
            return Objects.hash(array, index);
        }
    }

    public class MutableInt
    {
        public int val;

        public MutableInt(int val)
        {
            this.val = val;
        }
    }




    private Value[] findBestValues(Value from, int[] nums1, int index1, int[] nums2, int index2, int remainingNumbers)
    {

        int availableNumbersAll = (nums1.length - index1 - 1) + (nums2.length - index2 - 1);
        int start1 = index1 + 1;
        int end1 = Math.min(start1 + (availableNumbersAll - remainingNumbers),nums1.length-1);

        int start2 = index2 + 1;
        int end2 = Math.min(start2 + (availableNumbersAll - remainingNumbers),nums2.length-1);

        int maxVal = -1;
        int degree = from != null ? from.degree+1 : 1;

        Value[] values = new Value[2];

        for (int i=start1; i<=end1; i++)
        {
            if (nums1[i] > maxVal)
            {
                values[0] = new Value(nums1[i],1,i,index2,remainingNumbers,from,degree);
                maxVal = nums1[i];

                if (nums1[i] == 9)
                    break;
            }

        }
        maxVal = -1;
        for (int i=start2; i<=end2; i++)
        {
            if (nums2[i] > maxVal)
            {
                values[1] = new Value(nums2[i],2,i,index1,remainingNumbers,from,degree);
                maxVal = nums2[i];

                if (nums2[i] == 9)
                    break;
            }


        }

        return values;
    }

    private int[] makeNumber(Value value,int length)
    {
        Value v = value;
        int[] number = new int[length];

        for (int i=length-1; i>=0; i--)
        {
            number[i] = v.number;
            v = v.from;
        }

        return number;
    }

    private int pick(Value value1, Value value2)
    {
        if (value1 == null && value2 != null)
            return 2;
        else if (value1 != null && value2 == null)
            return 1;
        else
        {
            if (value1.number > value2.number)
                return 1;
            else if (value2.number > value1.number)
                return 2;
            else
                return 3;
        }
    }


    private void addValues(Value lastAddedValue, int whichOneToPick, Value value1, Value value2, Queue<Value> openNodes, int[] result, MutableInt resultInd, boolean draw)
    {
        if (whichOneToPick == 1)
        {
            openNodes.add(value1);

            if (!draw)
                result[resultInd.val++] = value1.number;
        }
        else if (whichOneToPick == 2)
        {
            openNodes.add(value2);

            if (!draw)
                result[resultInd.val++] = value2.number;
        }
        else
        {
            if (draw)
            {
                if (!openNodes.contains(value1))
                    openNodes.add(value1);

                if (!openNodes.contains(value2))
                    openNodes.add(value2);
            }
            else
            {
                openNodes.add(value1);
                openNodes.add(value2);
                result[resultInd.val++] = value1.number;
            }

        }
    }

    private void keepBestAmongOpenNodes(LinkedList<Value> openNodes)
    {
        int max = -1;

        for (Value value:openNodes)
        {
            if (value.number > max)
            {
                max = value.number;

                if (max == 9)
                    break;
            }
        }

        LinkedList<Value> openNodesTemp = new LinkedList<>();

        for (Value value:openNodes)
        {
            if (value.number == max)
                openNodesTemp.add(value);
        }

        openNodes = openNodesTemp;

    }

    /**
     * Interface method
     * @param nums1
     * @param nums2
     * @param k
     * @return
     */
    public int[] maxNumber(int[] nums1, int[] nums2, int k)
    {
        //TODO:edge cases

        LinkedList<Value> openNodes = new LinkedList<>();
        int index1 = -1;
        int index2 = -1;
        Value[] bestValues;
        int remainingNumbers = k;
        int[] maxValues = new int[k+1];
        int[] result = new int[k];
        MutableInt resultInd = new MutableInt(0);
        int whichOneToPick;
        boolean draw = false;
        int drawCase = 0;

        bestValues = findBestValues(null,nums1,index1,nums2,index2,remainingNumbers);
        whichOneToPick = pick(bestValues[0],bestValues[1]);

        addValues(null,whichOneToPick,bestValues[0],bestValues[1],openNodes,result,resultInd,draw);

        if (whichOneToPick == 3)
            draw = true;

        while (!openNodes.isEmpty())
        {
            Value value = openNodes.poll();

            if (value.degree == k)
            {
                return makeNumber(value,k);
            }

            bestValues = findBestValues(value,nums1, value.array == 1 ? value.index : value.indexOther,
                    nums2, value.array == 2 ? value.index : value.indexOther,
                    value.remainingNumbers-1);

            whichOneToPick = pick(bestValues[0],bestValues[1]);
            addValues(value,whichOneToPick,bestValues[0],bestValues[1],openNodes,result,resultInd,draw);

            if (draw)
            {
                //Check if the current level finished
                Value value1 = openNodes.getFirst();
                Value value2 = openNodes.getLast();
                if (value1.degree == value2.degree)
                {
                    if (value1.number > value2.number)
                    {
                        openNodes.remove(1);
                        result[resultInd.val++] = value1.number;
                        draw = false;
                    }
                    else if (value2.number > value1.number)
                    {
                        openNodes.remove(0);
                        result[resultInd.val++] = value2.number;
                        draw = false;
                    }
                    else
                    {
                        if (value1.array == value2.array && value1.index == value2.index)
                        {
                            openNodes.remove(0);
                            draw = false;
                        }


                        result[resultInd.val++] = value2.number;
                    }
                }
            }
            else if (whichOneToPick == 3)
            {
                draw = true;
            }


            int x=0;
        }


        return null;
    }
}
