package org.leetcode.divide_two_integers_29;


import java.util.concurrent.atomic.AtomicInteger;

public class Solution {

    private static int quotient = 0;
    private static int remainder = 1;

    private int checkForOverflows(int dividend, int divisor)
    {

        if (Math.abs(divisor) > 1)
        {
            return -1;
        }
        else if (dividend == Integer.MAX_VALUE)
        {
            return divisor > 0 ? dividend : -dividend;
        }
        else if (dividend == Integer.MIN_VALUE)
        {
            return divisor > 0 ? dividend : Integer.MAX_VALUE;
        }
        else
        {
            return -1;
        }

    }

    private int[] checkEdgeCases(int dividend, int divisor)
    {
        int[] result = new int[] {-1,-1};

        //Edge cases
        if (dividend == 0)
        {
            result[quotient] = 0;
            result[remainder] = 0;
            return result;
        }
        else if (divisor == 1)
        {
            result[quotient] = dividend;
            result[remainder] = 0;
        }
        else if (dividend == divisor)
        {
            result[quotient] = 1;
            result[remainder] = 0;
            return result;
        }
        else if (dividend < divisor)
        {
            result[quotient] = 0;
            result[remainder] = 0;
            return result;
        }

        return result;
    }
    
    private String checkEdgeCases(String dividendStr, String divisorStr)
    {

        //Edge cases
        if (dividendStr.equals("0"))
        {
            return "0";
        }
        else if (divisorStr.equals("1"))
        {
            return dividendStr;
        }
        else if (dividendStr == divisorStr)
        {
            return "1";
        }
        else
        {
            int dividend = Integer.parseInt(dividendStr);
            int divisor = Integer.parseInt(divisorStr);

            if (dividend < divisor)
            {
                return "0";
            }

        }

        return null;
    }

    //Divide two numbers which are close iteratively by subtraction.
    public int[] divideSmall(int dividend, int divisor)
    {
        int[] result = checkEdgeCases(dividend,divisor);

        if (result[0] != -1)
            return result;

        //Subtract until the remaining amount is less than divisor.
        result[quotient] = 0;
        result[remainder] = dividend;
        while(result[remainder]>= divisor)
        {
            result[quotient]++;
            result[remainder] -= divisor;
        }

        return result;
    }

    private void boostQuotientWithZeros(String dividendSeries, StringBuilder quotientSeries,AtomicInteger indexDividend)

    {
        quotientSeries.append('0');

        while (true)
        {
            if (indexDividend.intValue() == dividendSeries.length()-1 || dividendSeries.charAt(indexDividend.intValue()) != '0')
                return;

            if (dividendSeries.charAt(indexDividend.getAndIncrement()) == '0')
            {
                quotientSeries.append('0');
            }

        }
    }

    private int boostFromQuotient(StringBuilder remainderSeries, String dividendSeries, int divisor, AtomicInteger indexDividend)
    {
        int subDividend = 0;
        while (true)
        {
            subDividend = Integer.parseInt(remainderSeries.toString());

            if (subDividend <= divisor)
            {
                if (indexDividend.intValue() == dividendSeries.length())
                {
                    return -1;
                }
                else
                {
                    remainderSeries.append(dividendSeries.charAt(indexDividend.getAndIncrement()));
                    continue;
                }
            }
            else
            {
                return subDividend;
            }
        }

    }

    /**
     * Interface method.
     * @param dividend
     * @param divisor
     * @return
     */
    public int divide(int dividend, int divisor)
    {

        //determine Quotient sign.
        int sign = ((dividend > 0 && divisor > 0) || (dividend < 0 && divisor < 0)) ? 1 : -1;

        //Check for overflow cases
        int resultOverflow;

        if ((resultOverflow = checkForOverflows(dividend,divisor)) != -1)
            return resultOverflow;

        //Convert dividend to string.
        String dividendSeries = Integer.toString(dividend);

        //Assign absolute values
        dividend = Math.abs(dividend) >= 0 ? Math.abs(dividend) : Integer.MAX_VALUE;
        divisor = Math.abs(divisor) >= 0 ? Math.abs(divisor) : Integer.MAX_VALUE;

        //Check for edge cases
        int[] edgeCases = checkEdgeCases(dividendSeries,divisor);

        if (edgeCases[quotient] != -1)
            return sign == -1 ? -edgeCases[quotient] : edgeCases[quotient];


        StringBuilder remainderSeries = new StringBuilder("");
        StringBuilder quotientSeries = new StringBuilder("");
        AtomicInteger indexDividend = new AtomicInteger(0);
        int subDividend = 0;

        //Take to first sub dividend
        StringBuilder subDividendStr = new StringBuilder("");
        for (int i=0; i<dividendSeries.length();i++)
        {
            subDividendStr.append(dividendSeries.charAt(i));

            if ((subDividend = Integer.parseInt(subDividendStr.toString())) > divisor)
            {
                indexDividend = new AtomicInteger(i+1);
                break;
            }
        }

        while (true)
        {
            int[] subResult = divideSmall(subDividend,divisor);

            quotientSeries.append(subResult[quotient]);
            remainderSeries = new StringBuilder("");
            remainderSeries.append(subResult[remainder]);

            if (indexDividend.intValue() == dividendSeries.length())
                break;

            //Boost the remainder while also appending zeros to the quotient.
            if (subResult[remainder] == 0 && dividendSeries.charAt(indexDividend.intValue()) == '0')
            {
                boostQuotientWithZeros(dividendSeries,quotientSeries,indexDividend);
            }

            //No more numbers in the dividend.
            if (indexDividend.intValue() == dividendSeries.length())
                break;

            //Boost the remainder series until it's big enough to be divided into divisor again.
            subDividend = boostFromQuotient(remainderSeries,dividendSeries,divisor,indexDividend);

            if (subDividend == -1)
                break;
        }

        int quotient = Integer.parseInt(quotientSeries.toString());

        return sign == -1 ? -quotient : quotient;

    }
}
