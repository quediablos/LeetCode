package org.leetcode.perfect_rectangle_391;


import java.util.HashMap;
import java.util.Map;

public class Solution
{

    private long areaGross = 0l;

    int minX = Integer.MAX_VALUE;
    int minY = Integer.MAX_VALUE;
    int maxX = -1;
    int maxY = -1;
    private Node root = null;

    public class Node
    {
        public int lowX, lowY, highX, highY;
        public int minX, minY, maxX, maxY;

        public Node node1, node2, node3, node4;

        public Node(int lowX, int lowY, int highX, int highY) {
            this.lowX = lowX;
            this.lowY = lowY;
            this.highX = highX;
            this.highY = highY;

            this.minX = lowX;
            this.minY = lowY;
            this.maxX = highX;
            this.maxY = highY;
        }

        @Override
        public String toString() {
            return "Node{" +
                    "lowX=" + lowX +
                    ", lowY=" + lowY +
                    ", minX=" + minX +
                    ", minY=" + minY +
                    ", maxX=" + maxX +
                    ", maxY=" + maxY +
                    '}';
        }
    }

    private boolean checkOverlap(Node node1, Node node2)
    {

        return (node1.lowX < node2.highX && node1.highX > node2.lowX && node1.highY > node2.lowY && node1.lowY < node2.highY);
    }


    public boolean overlapSearch(Node root, Node node)
    {
        if (root == null)
            return false;

        if (checkOverlap(root,node))
            return true;

        if (root.node3 != null && root.node3.maxX > node.lowX && root.node3.maxY > node.lowY)
            return overlapSearch(root.node3,node);
        else if (root.node2 != null && root.node2.maxX > node.lowX)
            return overlapSearch(root.node2,node);
        else if (root.node4 != null && root.node4.maxY > node.lowY)
            return overlapSearch(root.node4,node);
        else
            return overlapSearch(root.node1,node);
    }

    public Node insert(Node root,int lowX,int lowY,int highX,int highY)
    {
        if (root == null)
            return new Node(lowX,lowY,highX,highY);

        if (lowX < root.lowX)
        {
            if (lowY < root.lowY)
                root.node3 = insert(root.node3,lowX,lowY,highX,highY);
            else
                root.node2 = insert(root.node2,lowX,lowY,highX,highY);
        }
        else
        {
            if (lowY < root.lowY)
                root.node4 = insert(root.node4,lowX,lowY,highX,highY);
            else
                root.node1 = insert(root.node1,lowX,lowY,highX,highY);
        }

        if (highX > root.maxX)
            root.maxX = highX;

        if (highY > root.maxY)
            root.maxY = highY;

        if (lowX < root.minX)
            root.minX = lowX;

        if (lowY < root.minY)
            root.minY = lowY;

        return root;

    }

    private Boolean checkEdgeCases(int[][] rectangles)
    {
        if (rectangles.length == 0)
            return Boolean.FALSE;
        else if (rectangles.length == 1)
            return Boolean.TRUE;
        else
            return null;
    }

    private void updateEdgeValues(int lowX, int lowY, int highX, int highY)
    {
        if (lowX < minX)
            minX = lowX;

        if (lowY < minY)
            minY = lowY;

        if (highX > maxX)
            maxX = highX;

        if (highY > maxY)
            maxY = highY;
    }

    private boolean overlapSearchBruteForce(int[][] rectangles)
    {
        for (int i=0; i<rectangles.length; i++)
        {
            Node node1 = new Node(rectangles[i][0],rectangles[i][1],rectangles[i][2],rectangles[i][3]);
            for (int k=0; k<rectangles.length; k++)
            {
                if (i != k)
                {
                    Node node2 = new Node(rectangles[k][0],rectangles[k][1],rectangles[k][2],rectangles[k][3]);
                    if (checkOverlap(node1,node2))
                        return true;
                }
            }
        }

        return false;
    }

    private boolean saveRectangle(int lowX, int lowY, int highX, int highY)
    {
        Node node = new Node(lowX,lowY,highX,highY);

        if (overlapSearch(root,node))
        {
            return false;
        }
        else
        {
            root = insert(root,lowX,lowY,highX,highY);
            areaGross += (highX-lowX)*(highY-lowY);
        }


        return true;

    }

    /**
     * Interface method
     * @param rectangles
     * @return
     */
    public boolean isRectangleCover(int[][] rectangles)
    {
        //Edge cases
        Boolean edgeCases = checkEdgeCases(rectangles);

        if (edgeCases != null)
            return edgeCases;

        for (int[] rectangle : rectangles)
        {
            if (!saveRectangle(rectangle[0],rectangle[1],rectangle[2],rectangle[3]))
                return false;

            updateEdgeValues(rectangle[0],rectangle[1],rectangle[2],rectangle[3]);
        }

        //boolean overlap = overlapSearchBruteForce(rectangles);

        //Compare the total area
        return (maxX-minX)*(maxY-minY) == areaGross;

    }
}
