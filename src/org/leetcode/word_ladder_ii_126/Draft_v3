package org.leetcode.word_ladder_ii_126;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

public class Solution {

    private HashMap<String,List<String>> neighbours = new HashMap();
    private int minLength = 9999999;
    private HashSet<String> deadEnds = new HashSet<>();

    public boolean canTransormTo(String source, String destination)
    {
        int transformedChars = 0;
        for (int i=0; i<destination.length(); i++)
        {
            if (source.charAt(i) != destination.charAt(i) && ++transformedChars > 1)
                return false;
        }

        return true;
    }

    private String hashKey(String s1, String s2)
    {
        return s1.concat("-").concat(s2);
    }

    private String hashKeyReverse(String s1, String s2)
    {
        return s2.concat("-").concat(s1);
    }

    private void addNeighbour(String word, String neigbour)
    {
        List<String> neighboursOfWord = neighbours.get(word);

        if (neighboursOfWord == null)
            neighbours.put(word,new ArrayList<>());

        neighbours.get(word).add(neigbour);
    }

    private void generateRoutes(List<String> wordList)
    {
        for (int i=0; i<wordList.size()-1; i++)
        {
            for (int k=i+1; k<wordList.size(); k++)
            {
                String word = wordList.get(i);
                String neighbour = wordList.get(k);

                if (canTransormTo(word,neighbour))
                {

                    addNeighbour(word,neighbour);
                    addNeighbour(neighbour,word);

                }

            }
        }
    }

    private List<String> findNextDestionations(String from)
    {
        return null;
    }


    private String getPathView(LinkedList<String> path)
    {
        StringBuilder stringBuilder = new StringBuilder();
        Iterator iterator = path.iterator();

        while(iterator.hasNext())
        {
            stringBuilder.append(iterator.next()).append("-");
        }

        return stringBuilder.toString();
    }

    private LinkedList<String> mergePaths(LinkedList<String> path1, LinkedList<String> path2)
    {
        LinkedList<String> pathMerged = new LinkedList<>();
        Iterator<String> iterator = path2.iterator();

        pathMerged.addAll(path1);
        pathMerged.addAll(path2);
        return pathMerged;
    }

    private boolean isNeighbourCloser(LinkedList<String> pathPrevious, String neighbour)
    {
        Iterator iterator = pathPrevious.iterator();
        int i=0;
        while(iterator.hasNext())
        {
            if (i==pathPrevious.size()-1)
                break;

            List<String> neighboursOfNode = neighbours.get(iterator.next());

            if (neighboursOfNode != null && neighboursOfNode.contains(neighbour))
                return true;

            i++;
        }

        return false;
    }



    private List<List<String>> findPaths(String from, String destination, LinkedList<String> pathPrevious)
    {
        List<String> availableNeighbours = neighbours.get(from);
        List<List<String>> pathsFromMe = new ArrayList<>();

        //Path found
        if (from.equals(destination))
        {
            if (pathPrevious == null)
            {
                LinkedList path = new LinkedList();
                path.add(from);
                path.add(destination);
                pathsFromMe.add(path);
                return pathsFromMe;
            }
            else
            {
                pathPrevious.addLast(from);

                /*if (pathPrevious.size() < minLength)
                    minLength = pathPrevious.size();*/

                pathsFromMe.add((List)pathPrevious.clone());
                return pathsFromMe;
            }
        }
        //Dead end
        else if (availableNeighbours == null)
        {
            //deadEnds.add(from);
            return pathsFromMe;
        }
        //Continue
        else
        {
            if (pathPrevious == null)
                pathPrevious = new LinkedList<>();

            pathPrevious.add(from);

            boolean pathTooLong = false;
            int countCircular = 0;
            int countDeadEnd = 0;
            for (String neighbour : availableNeighbours)
            {
                if (pathPrevious.size() == minLength)
                {
                    pathTooLong = true;
                    break;
                }

                if ((pathPrevious != null && pathPrevious.contains(neighbour)) || isNeighbourCloser(pathPrevious,neighbour))
                {
                    countCircular++;
                    continue;
                }
                else if (deadEnds.contains(neighbour))
                {
                    countDeadEnd++;
                    continue;
                }


                List<List<String>> pathsFromNeighbour = findPaths(neighbour,destination,pathPrevious);
                //System.out.println(getPathView(pathPrevious));
                for (List<String> pathFromNeighbour : pathsFromNeighbour)
                {
                    pathsFromMe.add(pathFromNeighbour);
                }
                if (pathPrevious.size() != 0)
                    pathPrevious.removeLast();
            }

            /*if (pathsFromMe.isEmpty() && !pathTooLong && countCircular == 0 && countDeadEnd == 0)
                deadEnds.add(from);*/

            return pathsFromMe;
        }

    }



    /**
     * Main method
     * @param beginWord
     * @param endWord
     * @param wordList
     * @return
     */
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {

        //long t0 = System.nanoTime();

        if (!wordList.contains(endWord))
            return new ArrayList<>();

        if (!wordList.contains(beginWord))
            wordList.add(beginWord);


        generateRoutes(wordList);

        for (minLength = 3; minLength <=wordList.size() ; minLength++)
        {
            List<List<String>> allPaths = findPaths(beginWord,endWord,null);

            if (!allPaths.isEmpty())
                return allPaths;
        }

        return new ArrayList<>();

        /*List<List<String>> allPaths = findPaths(beginWord,endWord,null);

        List<List<String>> shortestPaths = new ArrayList<>();

        for (List<String> path: allPaths )
        {
            if (path.size() <= minLength)
                shortestPaths.add(path);
        }

        //System.out.println((System.nanoTime()-t0));

        return shortestPaths;*/

    }

}
