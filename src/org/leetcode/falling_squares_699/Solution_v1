package org.leetcode.falling_squares_699;


import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class Solution
{
    private static final int WIDTH = 1;
    private static final int X = 0;

    private Map<Integer,List<Range>> heightMap = new HashMap<>();
    private int maxHeight = 0;
    private LinkedList<Integer> existingHeights = new LinkedList<>();

    public enum OverlapType
    {
        COVERS,
        SAME,
        IS_COVERED,
        WITH_INTERSECTIONS,
        NONE
    }

    public class Range
    {
        public int start;
        public int end;

        public Range(int start,int end)
        {
            this.start = start;
            this.end = end;
        }

        @Override
        public String toString()
        {
            return "Range{" +
                    "start=" + start +
                    ", end=" + end +
                    '}';
        }

    }

    public OverlapType checkOverlap(int start, int end, Range range)
    {
        if (start < range.start && end > range.end)
            return OverlapType.COVERS;
        else if (start == range.start && end == range.end)
            return OverlapType.SAME;
        else if (start > range.start && end < range.end)
            return OverlapType.IS_COVERED;
        else if (end <= range.start || start >= range.end)
            return OverlapType.NONE;
        else
            return OverlapType.WITH_INTERSECTIONS;
    }

    private void addToHeightMap(Range range, int height)
    {
        List<Range> rangesUpper;
        if ((rangesUpper = heightMap.get(height)) != null)
        {
            rangesUpper.add(range);
        }
        else
        {
            rangesUpper = new LinkedList<>();
            rangesUpper.add(range);
            heightMap.put(height,rangesUpper);
        }
    }

    private void addToExistingHeights(int heightToAdd)
    {
        if (existingHeights.isEmpty())
        {
            existingHeights.add(heightToAdd);
            return;
        }

        int i=0;
        for (Integer height: existingHeights)
        {
            if (heightToAdd > height)
            {
                existingHeights.add(i,heightToAdd);
                return;
            }
            else if (heightToAdd == height)
            {
                return;
            }
            else if (i == existingHeights.size()-1)
            {
                existingHeights.addLast(heightToAdd);
                return;
            }
            else
            {
                i++;
            }
        }
    }

    private int placeSquare(int pos, int width)
    {
        List<Range> rangesUpper;

        //initial case
        if (maxHeight == 0)
        {
            addToHeightMap(new Range(pos,pos+width),width);
            addToExistingHeights(width);
            maxHeight = width;
            return 0;
        }

        //continuation cases
        int ceilingHeight = 0;

        for (int heightLevel : existingHeights)
        {
            List<Range> ranges = heightMap.get(heightLevel);

            //Search if the new square overlaps with any height levels.
            for (int i=0; i<ranges.size(); i++)
            {
                OverlapType overlapType = checkOverlap(pos,pos+width,ranges.get(i));

                if (!overlapType.equals(OverlapType.NONE))
                {
                    ceilingHeight = heightLevel+width;
                    maxHeight = ceilingHeight > maxHeight ? ceilingHeight : maxHeight;
                    addToHeightMap(new Range(pos,pos+width),ceilingHeight);
                    addToExistingHeights(ceilingHeight);
                    return ceilingHeight;
                }
            }
        }

        //No collision
        ceilingHeight = width;
        maxHeight = ceilingHeight > maxHeight ? ceilingHeight : maxHeight;
        addToHeightMap(new Range(pos,pos+width),ceilingHeight);
        addToExistingHeights(ceilingHeight);

        return ceilingHeight;
    }

    /**
     * Method to be called
     * @param positions
     * @return
     */
    public List<Integer> fallingSquares(int[][] positions)
    {

        List<Integer> maxHeightHistory = new LinkedList<>();

        for (int i=0; i<positions.length; i++)
        {
            //Find where the new square will sit and place it.
            placeSquare(positions[i][X],positions[i][WIDTH]);

            maxHeightHistory.add(maxHeight);


        }

        return maxHeightHistory;

    }
}
